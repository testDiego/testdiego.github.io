<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Cortex-m0 | Diego Blog]]></title>
  <link href="http://testDiego.github.io/blog/categories/cortex-m0/atom.xml" rel="self"/>
  <link href="http://testDiego.github.io/"/>
  <updated>2014-08-22T12:49:27-07:00</updated>
  <id>http://testDiego.github.io/</id>
  <author>
    <name><![CDATA[Diego]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Primer Programa en Cortex-M0]]></title>
    <link href="http://testDiego.github.io/blog/2014/08/20/primer-programa-en-cortex-m0/"/>
    <updated>2014-08-20T23:10:07-07:00</updated>
    <id>http://testDiego.github.io/blog/2014/08/20/primer-programa-en-cortex-m0</id>
    <content type="html"><![CDATA[<p>Damos inicio a un interesante viaje directo a las entrañas inhóspitas de los microcontroladores y su parte más importante, Su CPU. Que en este caso sera un <strong>Cortex-M0</strong>.</p>

<p>En esta nueva serie de posts aprenderemos a programar en ensamblador un micro con un cpu <strong>Cortex-M0</strong>, como el que tiene el micro de nuestra tarjeta <strong>Nucleos-f072rb</strong>.</p>

<p>Ensamblador, debes estar bromeando, eso es cosa de la prehistoria!!!!.</p>

<p>Mmmmm No. Es verdad que mayormente se prefiere crear programas en un lenguaje como <strong>C</strong>, pero el ensamblador no esta desfasado y mucho menos obsoleto. Elejimos ensamblador porque es la mejor manera de conocer el funcionamiento a detalle de la máquina que estas programando, y a mayor nivel de conocimiento, mayor de nivel de control y confiabilidad tendrán sobre tus programas.</p>

<p>No voy a entrar en detalles describiendo la arquitectura del micro y como estan constituidas sus diferentes partes, para eso existe un excelente libro que lo explica a mucho mayor detalle de lo que lo haría yo. <a href="http://www.amazon.com/The-Definitive-Guide-ARM-Cortex-M0/dp/0123854776/ref=sr_1_2?ie=UTF8&amp;qid=1408658409&amp;sr=8-2&amp;keywords=the+definitive+guide+to+cortex"><strong>The Definitive Guide to the ARM Cortex-M0</strong></a>.</p>

<!--more-->


<p>Sin mas preambulos, crea una nueva carpeta que albergará tu proyecto y dentro de ella crea el archivo <code>test.s</code>.
<code>
$ mkdir ~/test_asm
$ touch ~/test_asm/test.s
$ cd ~/test_asm
</code></p>

<p>Abre el archivo <code>test.s</code> con tu editor de texto favorito y escribe tu primer programa en ensamblador
&#8220;`
        .text <br/>
        .syntax unified
        .thumb</p>

<pre><code>    .global _start
    .type start, %function
</code></pre>

<p>_start:
        .word       0x20003FFF /<em>stack pointer,   direccion 0x08000000</em>/
        .word       start      /<em>vector de reset, direccion 0x08000004</em>/</p>

<p>/<em> Inicio del programa en la dirección 0x0800008 </em>/
start:<br/>
        movs        r0, #10    /<em>carga un 10 al registro r0</em>/
        movs        r1, #5     /<em>carga un  5 al registro r1</em>/</p>

<p>deadloop: <br/>
        b           deadloop</p>

<pre><code>    .end
</code></pre>

<pre><code>
Y aquí la explicación de lo que acabamos de escribir. Primero que nada en este archivo existen dos tipos de instrucciones, aquellas que son para el propio compilador  y aquellas que son para que las ejecute el microcontrolador. Las primeras son todas las que inician con un **"."**

- **.text** esta directiva indica que inicia una región de programa que necesitara ser ensamblada ( _o interpretada_ )
- **.syntax unified**  indica que la sintaxis de ensamblador sera la versión unificada
- **.thumb** indica que el programa usará instrucciones de tipo Thumb
- **.global** permite que un símbolo o etiqueta permita ser compartida por otros archivos que compondrán tu programa
- **_start** es una etiqueta muy especial y representa el punto de incio de tu programa

Antes de continuar, es justo explicar que a partir de la etiqueta **_start** empezara tu programa. Con la etiqueta **.word** reservamos 4 direcciones de memoria para, en inicio almacenar el valor del stack pointer y después almacenar la direccion donde inciara tu programa. Que en este caso esta representado por la etiqueta **start**.

Las instrucciones que componen el programa que ejecutará tu micro inician a partir de la etiqueta start. Y por último la instrucción del compilador **.end** indica el fin del programa.

Bien, hora de ensamblar el programa. En tu terminal escribe.
</code></pre>

<p>$ arm-none-eabi-as -mcpu=cortex-m0 -mthumb -g -o test.o test.s
&#8220;`</p>

<p>Esto generará el archivo <code>test.o</code> y con este archivo deberemos enlazar nuestro program para que se ejecute a partir de la direccion <code>0x08000000</code>.
<code>
$ arm-none-eabi-ld -Ttext=0x08000000 -o test.elf test.o
</code></p>

<p>Nos conectamos a la tarjeta usando <strong>OpenOCD</strong>.
<code>
$ sudo openocd -f interface/stlink-v2-1.cfg -f target/stm32f0x_stlink.cfg
</code></p>

<p>Nuestro programa ya esta listo para cargarse en el micro de la tarjeta <strong>Nucleos-f072rb</strong>, y para ello usaremos <strong>gdb</strong>.
<code>
$ arm-none-eabi-gdb test.elf
</code></p>

<p>Conectate al puerto de OpenOCD
<code>
(gdb) target remote localhost:3333
</code></p>

<p>Cargamos el programa al micro
<code>
(gdb) load
</code></p>

<p>Aplicamos un reset para iniciar en la primera direccion de tu programa
<code>
(gdb) mon reset halt
target halted due to debug-request, current mode: Thread
xPSR: 0xc1000000 pc: 0x08000008 msp: 0x20003ffc
</code></p>

<p>Tu programa esta detenido justo en la direccion <code>0x08000008</code> en la cual esta la instrucción <code>movs r0, #10</code>.
<code>
(gdb) p/x $pc
</code>
Ojo, que no se ha ejecutado ninguna instrucción. Vamos ejecutando el programa paso a paso, para esto solo escribe
<code>
(gdb) step
</code></p>

<p>Ya se ejecutó la primera instrucción la cual cargaba el valor 10 al registro <code>r0</code>. Revisamos, y de una vez preguntamos por el registro <code>pc</code> y observamos como avanzó dos direcciones.
 <code>
(gdb) p $r0
$2 = 10
(gdb) p/x $pc
$3 = 0x800000a
</code></p>

<p>Vamos dando otro <code>step</code> para ejecutar la siguiente instrucción donde cargamos el valor <strong>5</strong> al registro <code>r1</code>.
<code>
(gdb) p $r1
$4 = 5
(gdb) p/x $pc
$5 = 0x800000a
</code></p>

<p>La última parte del programa es tan solo un bucle infinito en el que se queda clavado nuestro micro. Podemos considerar que ya se acabo nuestro primer programa.</p>

<p><code>q</code> para salir de <strong>gdb</strong> y un <code>Ctrl+c</code> para salir de <strong>OpenOCD</strong></p>
]]></content>
  </entry>
  
</feed>
